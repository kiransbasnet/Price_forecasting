# -*- coding: utf-8 -*-
"""Crypto_prediction _Pycaret.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TcIV4rjhtx_9WdvJNNoxkiEXLdEdW4bo
"""

pip install pycaret # package pycaret installation

pip install markupsafe==2.0.1

pip install jinja2

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
import jinja2
from pycaret.regression import *

import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

from google.colab import files
files.upload() # data set upload

#reading data. 
coinbit = pd.read_csv('coin_Bitcoin.csv')

coinbit #print the read data

"""Checking for Null Values"""

coinbit.isnull().sum()# checking null values

"""Dropping null valuse"""

#coinbit=coinbit.dropna()
#coinbit=coinbit.drop(columns=['New_Price'])

coinbit.isnull().sum()# checking null values

"""Some Insights about Bitcoin

EDA
"""

print("All Time High Price:",max(coinbit['Close']))
print("Highest Number of Bitcoin units traded during the minute:",max(coinbit['Volume']))

coinbit.describe().T

coming_day = 10 # variable for predicting for coming 10 day
coinbit['New_Price'] = coinbit[['Close']].shift(-coming_day)#creating the new coumns for dependent variable 
coinbit = coinbit[['Close' , 'New_Price']] # choose new column
coinbit # displayes close value and new dependent variables data.

df = coinbit.copy()# making a copy of data set as data frame.
x = np.array(df[df.columns])#creating independent data set  
x = x [:len(coinbit)-coming_day] # remov last n  row from the data set now n= coming_day=10
y = np.array(df['New_Price']) # creating dependent data set
y = y[:-coming_day] # getting  all y values except last 10 rows
X_train , X_test , y_train , y_test = train_test_split(x , y , test_size=0.2 , random_state = 0 , shuffle = False)#spliting training and testing data set  Train data is 80% and test data is 20%

train_data = pd.DataFrame(X_train , columns = df.columns) # getting train data and transform into data frame.
train_data.head(10)# show first 10 rows of data

test_data = pd.DataFrame(X_train , columns= df.columns) # getting test data and transform into dataframe
test_data.head(10)# Show forst 10 rows of data

regression_setup = setup(data = train_data, target = 'New_Price' , session_id =123 , use_gpu = True)# setup initialization

#Train all the model ad sort it by R -squire matrix(r2) and store the model.
best_model = compare_models(sort = 'r2')

#create the model and and disply the production matrix for training data sets
training_model = create_model(best_model)

#model evaluation
evaluate_model(training_model)

#prediction
future = predict_model(training_model , data= test_data)

#predicted future price 
future

import matplotlib.pyplot as plt

import matplotlib.pyplot as plt
fig, ax = plt.subplots(1, figsize=(13, 7))
ax.plot(future['Close'], label='Original', linewidth=2)
ax.plot(future['Label'],label = 'Predicted',linewidth=2)
ax.set_ylabel('Preic_USD' ,fontsize =14)
ax.set_title('',fontsize =16)
ax.legend(loc ='best',fontsize =16)